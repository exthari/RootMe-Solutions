# This contains line by line explanation of the ASM Code. (Reference : ChatGPT)

0x08048554 <+0>:	lea    ecx,[esp+0x4]                 ; Load the effective address of [esp+0x4] into ecx.
0x08048558 <+4>:	and    esp,0xfffffff0               ; Align the stack pointer by clearing the lower 4 bits.
0x0804855b <+7>:	push   DWORD PTR [ecx-0x4]          ; Push the value at [ecx-0x4] onto the stack.
0x0804855e <+10>:	push   ebp                         ; Push the value of ebp onto the stack.
0x0804855f <+11>:	mov    ebp,esp                     ; Move the value of esp into ebp (set up the base pointer).
0x08048561 <+13>:	push   edi                         ; Push the value of edi onto the stack.
0x08048562 <+14>:	push   ecx                         ; Push the value of ecx onto the stack.
0x08048563 <+15>:	sub    esp,0xb0                    ; Allocate 176 bytes on the stack.
0x08048569 <+21>:	mov    eax,DWORD PTR [ecx+0x4]      ; Move the value at [ecx+0x4] into eax.
0x0804856c <+24>:	mov    DWORD PTR [ebp-0x9c],eax     ; Move the value of eax into [ebp-0x9c].
0x08048572 <+30>:	mov    eax,gs:0x14                 ; Move the value of the segment register gs at offset 0x14 into eax.
0x08048578 <+36>:	mov    DWORD PTR [ebp-0xc],eax      ; Move the value of eax into [ebp-0xc].
0x0804857b <+39>:	xor    eax,eax                     ; XOR eax with itself (set eax to 0).
0x0804857d <+41>:	cmp    DWORD PTR [ecx],0x2          ; Compare the value at [ecx] with 0x2.
0x08048580 <+44>:	je     0x80485ae <main+90>        ; Jump to main+90 if the previous comparison was equal.
0x08048582 <+46>: xor    eax,eax                     ; XOR eax with itself (set eax to 0).
0x08048584 <+48>: xor    ebx,ebx                     ; XOR ebx with itself (set ebx to 0).
0x08048586 <+50>: xor    ecx,ecx                     ; XOR ecx with itself (set ecx to 0).
0x08048588 <+52>: xor    edx,edx                     ; XOR edx with itself (set edx to 0).
0x0804858a <+54>: mov    eax,DWORD PTR [ebp-0x9c]     ; Move the value at [ebp-0x9c] into eax.
0x08048590 <+60>: mov    eax,DWORD PTR [eax]          ; Move the value at the address stored in eax into eax.
0x08048592 <+62>: mov    DWORD PTR [esp+0x4],eax      ; Move the value of eax into the address [esp+0x4].
0x08048596 <+66>: mov    DWORD PTR [esp],0x80488f0    ; Move the address 0x80488f0 into the stack.
0x0804859d <+73>: call   0x804843c <printf@plt>       ; Call the printf function to print the string at address 0x80488f0.
0x080485a2 <+78>: mov    DWORD PTR [esp],0x0          ; Move the value 0 into the stack.
0x080485a9 <+85>: call   0x804848c <exit@plt>         ; Call the exit function to terminate the program.

0x080485ae <+90>: mov    DWORD PTR [esp],0x1d         ; Move the value 0x1d into the stack.
0x080485b5 <+97>: call   0x804844c <malloc@plt>       ; Call the malloc function to allocate memory (size 0x1d).

0x080485ba <+102>: mov    DWORD PTR [ebp-0x94],eax     ; Move the return value of malloc into [ebp-0x94].
0x080485c0 <+108>: mov    DWORD PTR [esp+0x8],0x1f    ; Move the value 0x1f into the stack at offset 8.
0x080485c8 <+116>: mov    DWORD PTR [esp+0x4],0x8048910 ; Move the address 0x8048910 into the stack at offset 4.
0x080485d0 <+124>: mov    eax,DWORD PTR [ebp-0x94]     ; Move the value at [ebp-0x94] into eax.
0x080485d6 <+130>: mov    DWORD PTR [esp],eax         ; Move the value of eax into the stack.
0x080485d9 <+133>: call   0x804841c <memcpy@plt>      ; Call the memcpy function to copy data to the address returned by malloc.

0x080485de <+138>: lea    edx,[ebp-0x8e]              ; Load the effective address of [ebp-0x8e] into edx.
0x080485e4 <+144>: mov    DWORD PTR [ebp-0xa4],edx    ; Move the value of edx into [ebp-0xa4].
0x080485ea <+150>: mov    DWORD PTR [ebp-0xa8],0x0    ; Move the value 0 into [ebp-0xa8].
0x080485f4 <+160>: mov    eax,0x64                    ; Move the value 0x64 (100 in decimal) into eax.
0x080485f9 <+165>: cmp    eax,0x4                     ; Compare the value in eax with 0x4.
0x080485fc <+168>: jb     0x804861c <main+200>        ; Jump to main+200 if eax is less than 0x4
0x080485fe <+170>: mov    DWORD PTR [ebp-0xac],0x19   ; Move the value 0x19 (25 in decimal) into [ebp-0xac].
0x08048608 <+180>: mov    edi,DWORD PTR [ebp-0xa4]    ; Move the value at [ebp-0xa4] into edi.
0x0804860e <+186>: mov    ecx,DWORD PTR [ebp-0xac]    ; Move the value at [ebp-0xac] into ecx.
0x08048614 <+192>: mov    eax,DWORD PTR [ebp-0xa8]    ; Move the value at [ebp-0xa8] into eax.
0x0804861a <+198>: rep stos DWORD PTR es:[edi],eax    ; Repeat storing the value in eax (0) into the memory location [edi], ecx times.

0x0804861c <+200>: mov    DWORD PTR [esp+0x8],0xd     ; Move the value 0xd into the stack at offset 8.
0x08048624 <+208>: mov    DWORD PTR [esp+0x4],0x804892f ; Move the address 0x804892f into the stack at offset 4.
0x0804862c <+216>: lea    eax,[ebp-0x8e]             ; Load the effective address of [ebp-0x8e] into eax.
0x08048632 <+222>: mov    DWORD PTR [esp],eax        ; Move the value of eax into the stack.
0x08048635 <+225>: call   0x804841c <memcpy@plt>     ; Call the memcpy function to copy data to the address [ebp-0x8e].

0x0804863a <+230>: mov    eax,DWORD PTR [ebp-0x94]    ; Move the value at [ebp-0x94] into eax.
0x08048640 <+236>: add    eax,0x5                   ; Add 0x5 to the value in eax.
0x08048643 <+239>: mov    BYTE PTR [eax],0x63        ; Move the value 0x63 ('c' in ASCII) into the byte at the address pointed by eax.
0x08048646 <+242>: mov    eax,DWORD PTR [ebp-0x94]    ; Move the value at [ebp-0x94] into eax.
0x0804864c <+248>: add    eax,0x16                  ; Add 0x16 to the value in eax.
0x0804864f <+251>: mov    BYTE PTR [eax],0x0         ; Move the value 0x0 (NULL terminator) into the byte at the address pointed by eax.

0x08048652 <+254>: mov    DWORD PTR ds:0x804a038,0x80486c4 ; Move the value 0x80486c4 into the address 0x804a038.

0x0804865c <+264>: mov    eax,DWORD PTR [ebp-0x9c]    ; Move the value at [ebp-0x9c] into eax.
0x08048662 <+270>: add    eax,0x4                   ; Add 0x4 to the value in eax.
0x08048665 <+273>: mov    eax,DWORD PTR [eax]        ; Move the value at the address pointed by eax into eax.
0x08048667 <+275>: mov    DWORD PTR [esp+0x4],eax    ; Move the value in eax into the stack at offset 4.
0x0804866b <+279>: lea    eax,[ebp-0x2a]             ; Load the effective address of [ebp-0x2a] into eax.
0x0804866e <+282>: mov    DWORD PTR [esp],eax        ; Move the value of eax into the stack.
0x08048671 <+285>: call   0x804842c <strcpy@plt>     ; Call the strcpy function to copy data from the address in eax to [ebp-0x2a].
0x08048676 <+290>: mov    eax,DWORD PTR [ebp-0x94]    ; Move the value at [ebp-0x94] into eax.
0x0804867c <+296>: add    eax,0x8                   ; Add 0x8 to the value in eax.
0x0804867f <+299>: mov    BYTE PTR [eax],0x5f        ; Move the value 0x5f ('_' in ASCII) into the byte at the address pointed by eax.
0x08048682 <+302>: mov    eax,DWORD PTR [ebp-0x94]    ; Move the value at [ebp-0x94] into eax.
0x08048688 <+308>: add    eax,0x9                   ; Add 0x9 to the value in eax.
0x0804868b <+311>: mov    BYTE PTR [eax],0x2e        ; Move the value 0x2e ('.' in ASCII) into the byte at the address pointed by eax.

0x0804868e <+314>: mov    edx,DWORD PTR ds:0x804a038 ; Move the value at address 0x804a038 into edx.
0x08048694 <+320>: mov    eax,DWORD PTR [ebp-0x94]    ; Move the value at [ebp-0x94] into eax.
0x0804869a <+326>: mov    DWORD PTR [esp+0x4],eax    ; Move the value in eax into the stack at offset 4.
0x0804869e <+330>: lea    eax,[ebp-0x2a]             ; Load the effective address of [ebp-0x2a] into eax.
0x080486a1 <+333>: mov    DWORD PTR [esp],eax        ; Move the value of eax into the stack.
0x080486a4 <+336>: call   edx                       ; Call the function pointed by edx (Function pointer call).

0x080486a6 <+338>: mov    edx,DWORD PTR [ebp-0xc]    ; Move the value at [ebp-0xc] (old gs:0x14) into edx.
0x080486a9 <+341>: xor    edx,DWORD PTR gs:0x14      ; XOR the value of edx with the current gs:0x14 (stack canary).
0x080486b0 <+348>: je     0x80486b7 <main+355>      ; Jump to main+355 if the result of the XOR is zero (no stack canary mismatch).
0x080486b2 <+350>: call   0x804845c <__stack_chk_fail@plt> ; Call __stack_chk_fail function (stack canary mismatch).

0x080486b7 <+355>: add    esp,0xb0                  ; Adjust the stack pointer to deallocate the local variables and return address.
0x080486bd <+361>: pop    ecx                       ; Pop the value from the stack into ecx (restore the value of ecx).
0x080486be <+362>: pop    edi                       ; Pop the value from the stack into edi (restore the value of edi).
0x080486bf <+363>: pop    ebp                       ; Pop the value from the stack into ebp (restore the value of ebp).
0x080486c0 <+364>: lea    esp,[ecx-0x4]             ; Load the effective address of [ecx-0x4] into esp.
0x080486c3 <+367>: ret                            ; Return from the function.
